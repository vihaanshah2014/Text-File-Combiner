CS 214 / Heap management
========================

Recitations start tonight
Project I group sign-up sheet on Canvas



Project I
---------

Errors to detect

1. attempt to malloc() too much memory
2. attempt to malloc() more memory than is currently available

3. attempt to free an address outside the heap
4. attempt to free an address of a non-allocated object
5. attempt to free an address in the heap but not of an object


#define MEMLENGTH 512
static double memory[MEMLENGTH];

using "static" makes the array private to this file
	(that is, it does not participate in linking)
	
we use "double" solely because it is 8 bytes and has 8-byte alignment



alignment
- primitive data types are at addresses that are multiples of their length
	- simplifies reading memory
	- prevents partial overlap
- how does malloc ensure alignment?
	- it has no way to distinguish an array of ints from an array of doubles
	- it always gives the maximum alignment for the hardware


suggestion: instead of using memory directly, cast it to a char pointer

#define heap ((char *) memory)

	heap + 128
	
reminder: we can cast pointers at any time


rounding up to multiples of 8

~7		-- all ones ending with 3 zeroes

n & ~7  -- rounds down to a multiple of 8

(n + 7) & ~7    -- rounds up to a multiple of 8


both header and payload sizes must be multiples of 8



your malloc implementation checks for incorrect use of free
-> this leads to a big performance hit

the real malloc/free are designed for speed
-> free is O(1) because it assumes its pointer is good


struct header {
	int allocated;
	int size;
};

(struct header *)(heap + 800)->allocated

(int *) (heap + 800)
(int *) (heap + 804)



