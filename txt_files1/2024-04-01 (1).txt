CS 214 / Condition variables
============================

thread-safe queue

-> for safety, ensure only one thread accesses the queue at a time

mutex - abstraction used to coordinate access to a resource
    "locked" - one thread has access (only one!)
    "unlocked" - no thread has access
    
    only the thread that locked the mutex can unlock it
    

what operations should a thread-safe queue provide?
    enqueue
    dequeue
        -> this can't work if the queue is empty
        
    when the queue is empty, we might want dequeue to block until
        another thread enqueues
        
Pthread offers "condition variables"

    mechanism for threads to block until some condition is met
        -> indicated by another thread saying the condition is met


pthread_cond_t


int pthread_cond_init(pthread_cond_t *cv, pthread_condattr_t *attrs);
int pthread_cond_destroy(pthread_cond_t *cv);

int pthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *lock);
    blocks thread until cv is signaled (temporarily unlocking lock)
    
int pthread_cond_signal(pthread_cond_t *cv);
    wakes one thread waiting for cv

int pthread_cond_broadcast(pthread_cond_t *cv);
    wakes all threads waiting for cv



C1                  P1                      C2
dequeue
    -> wait for
    read_ready

                    enqueue
                        ->signal
                        read_ready
unblocked
                                            dequeue
                                                succeeds
                                                length = 0

    ->wait for
    read_ready
