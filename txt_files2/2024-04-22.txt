CS 214 / Application example
============================

Schedule
    Monday, April 29: review for final exam
    Monday, May 6: final exam
        - comprehensive
        - on-line via Canvas
        - available for 24 hours
        - primarily multiple choice


the ghost of project IV
-----------------------

on-line video game server
    for rock-paper-scissors


assume these:
    Physical layer
    Data link layer
    Network layer (IP)
    Transport layer (TCP)
    
we need to design
    Session layer
    Presentation layer
    Application layer
    
    

session choices
---------------


choice: peer to peer vs client-server vs other

    for us, client-server makes sense
        client corresponds to a player
            - establishes connection
            - provides UI
            
        server manages game sessions
            - waits for connection requests
            - pairs clients into game sessions
            - adjudicates victory
            

application choices
-------------------

what kinds of messages do we need?
who should send those messages?
what does the message flow look like?


game messages:
    server tells clients to move
    clients report their moves
    server indicates the results
    clients decide whether to keep playing
    
setup messages:
    connection message from client
        - can have parameters such as protocol version,
            preferred game type, player name, etc.
            
    response from server
        - indicates whether the parameters are acceptable
        
        
example flow:

    Client          Server
    connect()       accept()
        -- PLAY ->
        <- WAIT --
        
        <- BEGIN --
        -- MOVE ->
        <- RESULT --
        -- QUIT/CONTINUE ->
        
possible errors
    - incomplete or garbled messages
    - sending inappropriate messages
    - unexpected closing of connection
    
dealing with errors
    - close connection
    - send error message and close connection
    - send error message and try to continue
    


Presentation
------------

for today, we will make presentation very simple
    all messages are one byte
    
    (this is a proof-of-concept, rough draft protocol. for now.)
    


PLAY            H
WAIT            A
BEGIN           B
MOVE
    ROCK        R
    PAPER       P
    SCISSORS    S
RESULT
    WIN         W
    LOSS        L
    DRAW        D
    FORFEIT     F
CONTINUE        C
QUIT            Q

A real protocol would want longer messages so that we could include
more information
    e.g. player names, preferred games, other player's moves


writing a server
----------------

for initial testing, we want a test client
    - probably fairly simple, until the server is more complete
    
    
structure: dealing with multiple game sessions
    - no concurrent game sessions
    - single thread that handles everything
    - one thread per connection (=> two threads per game session)
    - one thread per session (=> two connections per thread)
    
    (alternatives: use processes instead of threads)
    

    
    
    
        
    

